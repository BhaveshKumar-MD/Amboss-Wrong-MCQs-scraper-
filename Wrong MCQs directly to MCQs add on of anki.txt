(async () => {
  /* ---------- SETTINGS ---------- */
  const LIMIT       = 10; Set your questions limit how many you want to extract
  const DECK_NAME   = "AMBOSS Wrong MCQs"; must match deck in Anki
  const MODEL_NAME  = "MCQ Ultimate V2.1";

  /* ---------- TIMING ---------- */
  const LOAD_WAIT   = 800;
  const REVEAL_WAIT = 4000;
  const POLL_GAP    = 200;

  /* ---------- HELPERS ---------- */
  const delay  = ms => new Promise(r => setTimeout(r, ms));
  const clean  = s  => s.replace(/\s+/g, " ").trim();
  const letter = blk =>
    blk.querySelector('[data-test-id="CircledCharacter"]')?.innerText.trim() || "?";
  const post   = body =>
    fetch("http://127.0.0.1:8765", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body)
    }).then(r => r.json());

  /* ---------- MAIN LOOP ---------- */
  const dots = [...document.querySelectorAll('[class*="dotContainer"]')];
  let pushed = 0;

  const imgQuestions    = [];   // Q numbers with ≥1 image
  const failedQuestions = [];   // Q numbers not added to Anki

  for (let i = 0; i < dots.length && pushed < LIMIT; i++) {
    const qNum = i + 1;         // progress‑bar numbering
    const dot  = dots[i];
    if (!dot.className.includes("dotContainerRed")) continue;

    try {
      dot.scrollIntoView({ block: "center" });
      dot.click();
      await delay(LOAD_WAIT);

      /* Show answer */
      const box = [...document.querySelectorAll('.css-h0nko7-StyledInlineItem.e6i75dx1')]
        .find(el => /show answer/i.test(el.textContent.trim()));
      (box?.querySelector("button") || box)?.click();

      /* wait until correct flag appears */
      const t0 = Date.now();
      while (!document.querySelector('[class*="--success"]') &&
             Date.now() - t0 < REVEAL_WAIT) await delay(POLL_GAP);

      /* STEM (+ abstract) */
      const qNode  = document.querySelector('[class*="questionContent"]');
      const absSec = document.querySelector('section._760ee638b575af4a--abstractWrapper');
      if (!qNode) { failedQuestions.push(qNum); continue; }

      const stemHTML = (
        (absSec ? absSec.innerText + "\n\n" : "") + qNode.innerText
      ).trim().replace(/\n/g, "<br>");

      /* IMAGES */
      const thumbs = [
        ...document.querySelectorAll('button[data-e2e-test-id="mini-media-viewer"] img[src]'),
        ...document.querySelectorAll('button._26c6d085fbfd0c71--mediaViewerTrigger img[src]')
      ];
      if (thumbs.length) imgQuestions.push(qNum);

      const pictures = thumbs.map((img, k) => ({
        url: img.src,
        filename: `amboss_${Date.now()}_${k}.jpg`,
        fields: ["Question"]
      }));

      /* OPTIONS */
      const optBlocks = [...document.querySelectorAll('[name="answertext"]')];
      const optText   = optBlocks.map(b =>
        clean(b.querySelector('[class*="--answerContent"]')?.innerText || "")
      );
      while (optText.length < 8) optText.push("");

      /* CORRECT + EXPLANATION */
      const okBlk = document.querySelector(
        '[data-e2e-test-id="answer-theme-answerOptionCorrect"]'
      );
      if (!okBlk) { failedQuestions.push(qNum); continue; }

      const correctLetter = letter(okBlk);
      const explanation = clean(
        okBlk.querySelector(
          '[data-e2e-test-id="answerExplanation"] ._981f8b48b6542a07--explanationContent'
        )?.innerText || "Explanation not found"
      ).replace(/\n/g, "<br>");

      /* BUILD NOTE */
      const note = {
        deckName: DECK_NAME,
        modelName: MODEL_NAME,
        fields: {
          Question: stemHTML,
          "option_1 (A)": optText[0],
          "option_2 (B)": optText[1],
          "option_3 (C)": optText[2],
          "option_4 (D)": optText[3],
          "option_5 (E)": optText[4],
          "option_6 (F)": optText[5],
          "option_7 (G)": optText[6],
          "option_8 (H)": optText[7],
          Ans: correctLetter,
          Explanation: explanation
        },
        pictures,
        options: { allowDuplicate: false }
      };

      const res = await post({ action: "addNote", version: 6, params: { note } });
      if (res.error) {
        console.warn(`❌  Anki error on Q${qNum}:`, res.error);
        failedQuestions.push(qNum);
      } else {
        console.log(`✅  Added card for Q${qNum}  (Pics: ${pictures.length})  (${pushed + 1}/${LIMIT})`);
        pushed++;
      }
    } catch (err) {
      console.error("Unexpected error on Q" + qNum, err);
      failedQuestions.push(qNum);
    }
  }

  /* ---------- FINAL OUTPUT ---------- */
  console.log(
    `%cDone! ${pushed} cards sent.`,
    "font-weight:bold;color:green"
  );
  console.log(
    `%cQuestions with images: ${imgQuestions.join(", ") || "none"}.`,
    "color:green;font-weight:bold"
  );
  console.log(
    `%cQuestions NOT added to Anki: ${failedQuestions.join(", ") || "none"}.`,
    "color:green;font-weight:bold"
  );

  // Expose arrays for further inspection
  window.QUESTIONS_WITH_IMAGES = imgQuestions;
  window.QUESTIONS_FAILED      = failedQuestions;
})();
